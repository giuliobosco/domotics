@startuml

package javax.servlet.http {
    class HttpServlet {

    }
}

package jdbc {
    class JdbcConnector {
        + static DEFAULT_PORT = 3306 : int
        + TIMEZONE_UTC : String
        - username : String
        - password : String
        - hostname : String
        - port : int
        - database : String
        - statement : Statement
        + JdbcConnector(String username, String password, String host, int port, String database)
        + JdbcConnector(String username, String password, String host, String database)
        # getDbConnection(String username, String password, String host, int port, String database) : Connection
        + createStatement() : void
        + closeStatement() : void
        + openConnection() : void
        + query(query : String) : ResultSet
        + update(update : String) : void
        + closeConnection() : void
        + static main(args : String[]) : void
    }

    class DomoticsJdbcC {
        - static USERNAME : String
        - static PASSWORD : String
        - static HOSTNAME : String
        - static PORT : int
        - static DATABASE : String
        + static getConnector() : JdbcConnector
        + static getIdManager() : IdManager
    }
}

package ldap {
    class LdapConnector {
        + final DEFAULT_PORT : int
        + static DEFAULT_SECURITY_AUTHENTICATION : String
        + static DEFAULT_INITIAL_CONTEXT_FACTORY : String
        - domain : String
        - port : int
        - base : String
        - security : String
        - setDomain(domain : String) : void
        + getDomain() : String
        - setPort(port : int) : void
        + getPort() : int
        - setBase(base : String) : void
        + getBase() : String
        - setSecurity(security : String)
        + getSecurity() : String
        + LdapConnector(domain : String, port : int, base : String, security : String)
        + LdapConnector(domain : String, port : int, base : String)
        + LdapConnector(domain : String, base : String, security : String)
        + LdapConnector(domain : String, base : String)
        - getConnectionString() : String
        - getDn(username : String) : String
        - getEnvironment(username : String, password : String) : Hashtable<String, String>
        + getDirContext(username : String, password : String) : DirContext
        + static main(args : String[]) : void
    }
}

package portal.authentication {

    interface Authenticator {
        authenticate(username : String, password : String) : boolean
    }

    class SqlAuthenticator {
        + authenticate(username : String, password : String) : boolean
    }
    Authenticator <|.. SqlAuthenticator

    class LdapAuthenticator {
        - static DOMAIN : String
        - static PORT : int
        - static BASE_OU : String
        - static SECURITY : String
        - subOu : String
        - getBaseOu() : String
        + LdapAuthenticator(subOu : String)
        + LdapAuthenticator()
        - getLdapConnector() : LdapConnector
        + authenticate(username : String, password : String) : boolean
        + static main(args : String[]) : void
    }
    Authenticator <|.. LdapAuthenticator

    class AuthenticationChecker {
        - session : HttpSession
        + AuthenticationChecker(session : HttpSession)
        + isValidSession() : boolean
        + getSessionUsername() : String
    }

    class LoginServlet {
        # doPost(request : HttpServletRequest, response : HttpServletResponse) : void
        # doGet(request : HttpServletRequest, response : HttpServletResponse) : void
    }
    HttpServlet <|-- LoginServlet

    class LogoutServlet {
        # doPost(request : HttpServletRequest, response : HttpServletResponse) : void
        # doGet(request : HttpServletRequest, response : HttpServletResponse) : void
    }
    HttpServlet <|-- LogoutServlet
}

package models {
    class Room {
        - name : String
        + getName() : String
        + Room(name : String)
        + getJson() : JSONObject
        + getJsonString() : String
        + static getRooms(sqlResultSet : ResultSet) : List<Room>
        + static get(name : String) : Room
        + static get(name : String, jdbcConnector : JdbcConnector) : Room
        + static main(args : String[]) : void
    }

    class Arduino {
        - id : String
        - ip : String
        - key : String
        - rootPassword : String
        + getId() : String
        + getIp() : String
        + getKey() : String
        + getRoom() : Room
        + Arduino(id : String, ip : String, key : String, rootPassword : String, room : Room)
        + Arduino(idManager : IdManager, id : String, ip : String)
        + Arduino(connector : JdbcConnector, id : String)
        + Arduino(connector : JdbcConnector, ip : String, key : String)
        + set(resultSet : ResultSet) : void
        + getJson() : JSONObject
        + getJsonString() : String
        + isAlive() : boolean
        + static getArduinos(sqlResultSet : ResultSet) : List<Arduino>
        + static getArduinosByRoom(jdbcConnector : JdbcConnector, roomName : String)
        + static main(args : String[]) : void
    }
    Room o-- Arduino

    class Light {
        + LIGHT_ON : int
        + LIGHT_OFF : int
        - pin : int
        - name : String
        + getPin() : int
        + getArduino() : Arduino
        + getName() : String
        + getId() : String
        + isOn() : boolean
        + Light(pin : int, arduino : Arduino, name : String)
        + Light(pin : int, arduino : Arduino, connector JdbcConnector)
        + getJson() : JSONObject
        + getJsonString() : String
        - getRequestString(status : int) : String
        - getRequestString() : String
        + turnOn() : void
        + turnOff() : void
        + getStatus() : int
        + toggleLight() : void
        + static getLights(rs : ResultSet) : List<Light>
        + static getJsonLights(lights : List<Light>) : JSONArray
        + static getLights(connector : JdbcConnector, room : Room) : List<Light>
        + static main(args : String[]) : void
    }
    Arduino o-- Light

    class LightButton {
        - buttonPin : int
        - light : Light
        + getButtonPin() : int
        + getLight() : Light
        + getArduino() : Arduino
        + LightButton(buttonPin : int, ip : String, key : String, connector : JdbcConnector)
        + LightButton(buttonPin : int, id : String, connector : JdbcConnector)
        - checkPin(int pin, connector : JdbcConnector) : void
        - loadLight(connector : JdbcConnector) : void
        + static main(args : String[]) : void
    }
    Arduino o-- LightButton

    class Thermometer {
        - pin : String
        - type : String
        + Thermometer(pin : String, arduinoId : String, connector : JdbcConnector)
        + getValue() : double
        + getValue(decimals : int) : double
        - getRequestString() : String
        + static getTemperatureByRoom(room : Room, connector : JdbcConnector) : double
        + static main(args : String[]) : void
    }
    Arduino o-- Thermometer

}

package acc {
    class JsonBuilder {
        + static ERROR : String
        + static OK : String
        + static getJsonResponse(status : String, message : String) : String
        + static getJsonResponseError(message : String) : String
        + static getJsonResponseOk(message : String) : String
    }

    class AccServlet {
        - AUTOCONF : String
        - REQUEST : String
        - doPost(request : HttpServletRequest, response : HttpServletResponse) : void
        - doGet(request : HttpServletRequest, response : HttpServletResponse) : void
    }
    HttpServlet <|-- AccServlet

    class Autoconf {
        - arduinoId : String
        - arduinoKey : String
        - serverAddress : String
        - serverPort : String
        + getJson() : String
        + Autoconf(idManager : IdManager, arduinoId : String, arduinoIp : String, serverAddress : String, serverPort : int)
    }

    class ControllerServlet {
        # doPost(request : HttpServletRequest, response : HttpServletResponse) : void
        # doGet(request : HttpServletRequest, response : HttpServletResponse) : void
    }
    HttpServlet <|-- ControllerServlet

    class GetRequest {
        + get(urlString : String) : String
    }

    class IdManager {
        + CLIENT_KEY_LENGTH : int
        - connector : JdbcConnector
        + IdManager(connector JdbcConnector)
        + checkIp(id : String, ip : String) : void
        + getAccClientKey(id : String) : String
        + getRoomById(id : String) : Room
        + static createKey() : String
        + static main(args : String[]) : void
    }
}

package data {
    class RoomsServlet {
        # doPost(request : HttpServletRequest, response : HttpServletResponse) : void
        # doGet(request : HttpServletRequest, response : HttpServletResponse) : void
        - getJsonRoom(room : Room, connector : JdbcConnector) : JSONObject
    }
    HttpServlet <|-- RoomsServlet
}

@enduml
